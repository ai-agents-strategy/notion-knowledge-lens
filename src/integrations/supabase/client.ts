// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!SUPABASE_URL) {
  console.error('‚ùå Missing VITE_SUPABASE_URL environment variable');
  throw new Error('Missing VITE_SUPABASE_URL environment variable. Please check your .env file.');
}

if (!SUPABASE_ANON_KEY) {
  console.error('‚ùå Missing VITE_SUPABASE_ANON_KEY environment variable');
  throw new Error('Missing VITE_SUPABASE_ANON_KEY environment variable. Please check your .env file.');
}

console.log('üîß Supabase Client Configuration:', {
  url: SUPABASE_URL ? `${SUPABASE_URL.substring(0, 30)}...` : 'MISSING',
  anonKey: SUPABASE_ANON_KEY ? `${SUPABASE_ANON_KEY.substring(0, 20)}...` : 'MISSING',
  hasUrl: !!SUPABASE_URL,
  hasAnonKey: !!SUPABASE_ANON_KEY
});

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    debug: process.env.NODE_ENV === 'development'
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web'
    }
  }
});

// Enhanced connection test with better error handling and timeouts
const testConnection = async () => {
  try {
    console.log('üîç Testing Supabase connection...');
    
    // Test auth session with timeout
    const sessionPromise = supabase.auth.getSession();
    const sessionTimeout = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Auth session timeout')), 8000)
    );

    const { data: { session }, error: sessionError } = await Promise.race([
      sessionPromise, 
      sessionTimeout
    ]) as any;

    if (sessionError) {
      console.warn('‚ö†Ô∏è Auth session test warning:', sessionError);
    } else {
      console.log('‚úÖ Auth session test passed:', {
        hasSession: !!session,
        userId: session?.user?.id || 'none'
      });
    }

    // Test database connectivity with timeout
    const queryPromise = supabase
      .from('profiles')
      .select('count')
      .limit(1);

    const queryTimeout = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Database query timeout')), 10000)
    );

    const { error: queryError } = await Promise.race([
      queryPromise, 
      queryTimeout
    ]) as any;

    if (queryError) {
      console.warn('‚ö†Ô∏è Database connectivity test warning:', queryError);
    } else {
      console.log('‚úÖ Database connectivity verified');
    }

    console.log('‚úÖ Supabase client initialized successfully');
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Supabase connection test completed with warnings:', error);
    // Don't throw error, just log warning
  }
};

// Test connection on initialization (non-blocking)
testConnection();